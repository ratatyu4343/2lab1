Лабораторна 1
Гаврилюк М.В. К28

В основі лабораторної обране завдання з предмету "Алгоритми та Складність":
зробити бінарне дерево - піраміду + дерево з пріорітетами
(так зване Декартове дерево або ж дераміда) 
+ графічний перегляд дерева на графіку.

Додано деякі unit-тести.

Побудовано основні UML діаграми.

В якості рефакторингу обрано винесення класу TreeNode за межі класа Tree,
тобто перехід від композиції до агрегації.(це відображено на деяких UML діаграмах)

Повторний прохід unit-тестів показує, що логіка програми не змінилася.

Додано часовий тест в конструкторі класу Tree:
	Duration before:  7.1e-06 s
	Duration after: 9.5e-06 s
Як бачимо, великої різниці в часі виконання немає.

Що дав рефакторин з точки зору принципів:
	KISS - дизайн проекту став простішим та зрозумілішім
	Можливість розвитку - можна створювати інші дерева
	YAGNI - оскільки клас TreeNode не контактує з юзером, то
		в ньому відсутні зайві get/set-ери.
	SRP - кожен об'єкт виконує лише один обов'язок. 
	OCP - розширення класу можливе лише при його успадкуванні
	LSP - якщо замінити клас нащадком, то код змінювати не потрібно
	ISP - програма розбилась на спеціалізовані інтерфейси, замість одного складнішого
	DIP - залежності в системі побудовані на основі абстракцій

Клас TreeNode винесений в окремий h-файл.